{"version":3,"sources":["images/board_standard.png","images/board_small.png","Layouts.js","Board.js","Node.js","AI.js","Score.js","Gamestate.js","App.js","index.js"],"names":["module","exports","board_layouts","board_standard","init","adjecencies","0","x","y","3","6","1","5","2","4","mills","pieces","image","board_small","Board","this","props","gs","animation_progression","is_animating","makeMove","player_turn","board_layout","board_type","className","style","width","height","src","Component","Bars","state","update_lock","componentDidUpdate","prev_props","action","forEach","mill","push","color","setState","getBars","last_moves","map","item","i","animation_type","last_move","j","length","loc","command","key","Fragment","Bar","getColor","getBar","dimensions","getBarSections","target","min_x","Math","min","min_y","max_x","max","max_y","size","type","top","left","mid_x","mid_y","dimensions1","dimensions2","Spaces","makeMoveOnClick","tileIsActive","isActive","possible_moves","getPieces","board","column","tile","possibleMove","move","Space","getDimensions","onMouseClick","ReactCursorPosition","activationInteractionMouse","INTERACTIONS","CLICK","onActivationChanged","backgroundColor","EXPLORATION_PARAMETER","sqrt","Node","children","Map","simulations","score","parent","AI","tree","interval","prototype","toPrimitive","get_child","child","get","clone","set","expand","random_move","advance","simulate","n","winner","backpropogate","diff","abs","best_move","max_winrate","winrate","turn","s","UCT","log","is_leaf","select","selectedMove","maxUCT","uct","iterate","register_move","win_chance","Gamestate","place_count","JSON","parse","stringify","selected","history","get_possible_moves","floor","random","setWinner","second_phase","Object","assign","board_info","valid_command","_","isEqual","console","error","is_new_mill","new_piece_in_mill","is_in_mill","splice","opp","Error","opposite","gameTypes","innerHTML","id","App","ai","ai_interval","game_type","think_time","think_progression","ai_win_chance","runAI","setInterval","stopAI","clearInterval","doMoveAnimation","checkAIMove","start","Date","now","animation_interval","setTimeout","timeout","think_interval","onGameTypeToggle","onColorToggle","onStart","Container","maxWidth","Grid","container","direction","justify","alignItems","spacing","element","xs","Card","elevation","CardContent","Settings","Box","mb","display","flexGrow","ButtonGroup","variant","aria-label","Button","disabled","onClick","Typography","ml","Info","getMoveText","getWinChanceText","substring","getSimCountText","mr","Nav","AppBar","position","Toolbar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.619dcab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/board_standard.fc18406c.png\";","module.exports = __webpack_public_path__ + \"static/media/board_small.e676a496.png\";","import board_standard from './images/board_standard.png';\r\nimport board_small from './images/board_small.png';\r\n\r\nconst board_layouts = {\r\n  board_standard: {\r\n    init: [\r\n      [\"E\",null,null,\"E\",null,null,\"E\"],\r\n      [null,\"E\",null,\"E\",null,\"E\",null],\r\n      [null,null,\"E\",\"E\",\"E\",null,null],\r\n      [\"E\",\"E\",\"E\",null,\"E\",\"E\",\"E\"],\r\n      [null,null,\"E\",\"E\",\"E\",null,null],\r\n      [null,\"E\",null,\"E\",null,\"E\",null],\r\n      [\"E\",null,null,\"E\",null,null,\"E\"]\r\n    ],\r\n    adjecencies: [\r\n      {\r\n        0: [{x: 0, y: 3},{x: 3, y: 0}],\r\n        3: [{x: 0, y: 0},{x: 0, y: 6},{x: 1, y: 3}],\r\n        6: [{x: 0, y: 3},{x: 3, y: 6}]\r\n      },{\r\n        1: [{x: 1, y: 3},{x: 3, y: 1}],\r\n        3: [{x: 1, y: 1},{x: 1, y: 5},{x: 0, y: 3},{x: 2, y: 3}],\r\n        5: [{x: 1, y: 3},{x: 3, y: 5}]\r\n      },{\r\n        2: [{x: 2, y: 3},{x: 3, y: 2}],\r\n        3: [{x: 2, y: 2},{x: 2, y: 4},{x: 1, y: 3}],\r\n        4: [{x: 2, y: 3},{x: 3, y: 4}]\r\n      },{\r\n        0: [{x: 0, y: 0},{x: 6, y: 0}, {x: 3, y: 1}],\r\n        1: [{x: 1, y: 1},{x: 5, y: 1}, {x: 3, y: 0}, {x: 3, y: 2}],\r\n        2: [{x: 2, y: 2},{x: 4, y: 2}, {x: 3, y: 1}],\r\n        4: [{x: 4, y: 4},{x: 2, y: 4}, {x: 3, y: 5}],\r\n        5: [{x: 5, y: 5},{x: 1, y: 5}, {x: 3, y: 4}, {x: 3, y: 6}],\r\n        6: [{x: 6, y: 6},{x: 0, y: 6}, {x: 3, y: 5}]\r\n      },{\r\n        2: [{x: 4, y: 3},{x: 3, y: 2}],\r\n        3: [{x: 4, y: 4},{x: 4, y: 2},{x: 5, y: 3}],\r\n        4: [{x: 4, y: 3},{x: 3, y: 4}]\r\n      },{\r\n        1: [{x: 5, y: 3},{x: 3, y: 1}],\r\n        3: [{x: 5, y: 5},{x: 5, y: 1},{x: 6, y: 3},{x: 4, y: 3}],\r\n        5: [{x: 5, y: 3},{x: 3, y: 5}]\r\n      },{\r\n        0: [{x: 6, y: 3},{x: 3, y: 0}],\r\n        3: [{x: 6, y: 6},{x: 6, y: 0},{x: 5, y: 3}],\r\n        6: [{x: 6, y: 3},{x: 3, y: 6}]\r\n      }\r\n    ],\r\n    mills: [\r\n      //vertical mills\r\n      [{x: 0, y: 0},{x: 0, y: 3},{x: 0, y: 6}],\r\n      [{x: 1, y: 1},{x: 1, y: 3},{x: 1, y: 5}],\r\n      [{x: 2, y: 2},{x: 2, y: 3},{x: 2, y: 4}],\r\n\r\n      [{x: 3, y: 0},{x: 3, y: 1},{x: 3, y: 2}],\r\n      [{x: 3, y: 4},{x: 3, y: 5},{x: 3, y: 6}],\r\n\r\n      [{x: 4, y: 4},{x: 4, y: 3},{x: 4, y: 2}],\r\n      [{x: 5, y: 5},{x: 5, y: 3},{x: 5, y: 1}],\r\n      [{x: 6, y: 6},{x: 6, y: 3},{x: 6, y: 0}],\r\n\r\n      //horizontal mills\r\n      [{x: 0, y: 0},{x: 3, y: 0},{x: 6, y: 0}],\r\n      [{x: 1, y: 1},{x: 3, y: 1},{x: 5, y: 1}],\r\n      [{x: 2, y: 2},{x: 3, y: 2},{x: 4, y: 2}],\r\n\r\n      [{x: 0, y: 3},{x: 1, y: 3},{x: 2, y: 3}],\r\n      [{x: 4, y: 3},{x: 5, y: 3},{x: 6, y: 3}],\r\n\r\n      [{x: 4, y: 4},{x: 3, y: 4},{x: 2, y: 4}],\r\n      [{x: 5, y: 5},{x: 3, y: 5},{x: 1, y: 5}],\r\n      [{x: 6, y: 6},{x: 3, y: 6},{x: 0, y: 6}]\r\n    ],\r\n    pieces: 9,\r\n    image: board_standard,\r\n    x: 7, y: 7\r\n  },\r\n  board_small: {\r\n    init: [\r\n      [\"E\",null,\"E\",null,\"E\"],\r\n      [null,\"E\",\"E\",\"E\",null],\r\n      [\"E\",\"E\",null,\"E\",\"E\"],\r\n      [null,\"E\",\"E\",\"E\",null],\r\n      [\"E\",null,\"E\",null,\"E\"]\r\n    ],\r\n    adjecencies: [\r\n      {\r\n        0: [{x: 0, y: 2},{x: 2, y: 0}],\r\n        2: [{x: 0, y: 0},{x: 1, y: 2},{x: 0, y: 4}],\r\n        4: [{x: 0, y: 2},{x: 2, y: 4}]\r\n      },{\r\n        1: [{x: 1, y: 2},{x: 2, y: 1}],\r\n        2: [{x: 1, y: 1},{x: 0, y: 2},{x: 1, y: 3}],\r\n        3: [{x: 1, y: 2},{x: 2, y: 3}]\r\n      },{\r\n        0: [{x: 0, y: 0},{x: 2, y: 1},{x: 4, y: 0}],\r\n        1: [{x: 1, y: 1},{x: 2, y: 0},{x: 3, y: 1}],\r\n        3: [{x: 1, y: 3},{x: 2, y: 4},{x: 3, y: 3}],\r\n        4: [{x: 0, y: 4},{x: 2, y: 3},{x: 4, y: 4}],\r\n      },{\r\n        1: [{x: 3, y: 2},{x: 2, y: 3}],\r\n        2: [{x: 3, y: 1},{x: 4, y: 2},{x: 3, y: 3}],\r\n        3: [{x: 3, y: 2},{x: 2, y: 3}]\r\n      },{\r\n        0: [{x: 4, y: 2},{x: 2, y: 0}],\r\n        2: [{x: 4, y: 0},{x: 3, y: 2},{x: 4, y: 4}],\r\n        4: [{x: 4, y: 2},{x: 2, y: 4}]\r\n      }\r\n    ],\r\n    mills: [\r\n      //vertical mills\r\n      [{x: 0, y: 0},{x: 0, y: 2},{x: 0, y: 4}],\r\n      [{x: 1, y: 1},{x: 1, y: 2},{x: 1, y: 3}],\r\n\r\n      [{x: 3, y: 3},{x: 3, y: 2},{x: 3, y: 1}],\r\n      [{x: 4, y: 4},{x: 4, y: 2},{x: 4, y: 0}],\r\n\r\n      //horizontal mills\r\n      [{x: 0, y: 0},{x: 2, y: 0},{x: 4, y: 0}],\r\n      [{x: 1, y: 1},{x: 2, y: 1},{x: 3, y: 1}],\r\n\r\n      [{x: 3, y: 3},{x: 2, y: 3},{x: 1, y: 3}],\r\n      [{x: 4, y: 4},{x: 2, y: 4},{x: 0, y: 4}]\r\n    ],\r\n    pieces: 5,\r\n    image: board_small,\r\n    x: 5, y: 5\r\n  }\r\n}\r\n\r\nexport default board_layouts;\r\n","import React, { Component } from 'react';\r\nimport board_layouts from './Layouts.js';\r\nimport './style/app.css';\r\nimport ReactCursorPosition, { INTERACTIONS } from 'react-cursor-position';\r\n\r\nconst SCALE = .5;\r\n\r\nexport default class Board extends Component {\r\n\r\n  render() {\r\n    const {gs, animation_progression, is_animating, makeMove, player_turn} = this.props;\r\n    const board_layout = board_layouts[gs.board_type];\r\n    return (\r\n      <div className=\"board-backdrop\">\r\n        <div className=\"board\" style={{width: (board_layout.x + 1) * 100 * SCALE, height: (board_layout.y + 1) * 100 * SCALE}}>\r\n          <img src={board_layout.image} />\r\n          <Bars\r\n            gs={gs}\r\n            animation_progression={animation_progression}\r\n            is_animating={is_animating}\r\n          />\r\n          <Spaces\r\n            gs={gs}\r\n            player_turn={player_turn}\r\n            animation_progression={animation_progression}\r\n            makeMove={makeMove}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Bars extends Component {\r\n\r\n  state = {\r\n    mills: [],\r\n    update_lock: true\r\n  }\r\n\r\n  componentDidUpdate = (prev_props) => {\r\n    const {gs, is_animating} = this.props;\r\n    if (gs.action === \"move_to\") return;\r\n\r\n    if (this.state.update_lock && prev_props.is_animating !== is_animating) {\r\n      var mills = [];\r\n      if (is_animating) {\r\n        mills = this.state.mills;\r\n      }\r\n      gs.mills[\"B\"].forEach(mill => {\r\n        mills.push({mill: mill, color: \"B\"});\r\n      });\r\n      gs.mills[\"W\"].forEach(mill => {\r\n        mills.push({mill: mill, color: \"W\"});\r\n      });\r\n      this.setState({mills, update_lock: false});\r\n    } else if (!this.state.update_lock && prev_props.is_animating === is_animating) {\r\n      this.setState({update_lock: true})\r\n    }\r\n  }\r\n\r\n  getBars = () => {\r\n    const {gs, animation_progression} = this.props\r\n    const last_moves = gs.last_moves();\r\n    return this.state.mills.map((item, i) => {\r\n        const {mill, color} = item;\r\n        var animation_type = null;\r\n        last_moves.forEach(last_move => {\r\n          for (let j = 0; j < mill.length; j++) {\r\n            var loc = mill[j];\r\n            if (last_move.command.x === loc.x && last_move.command.y === loc.y) {\r\n              animation_type = {\"target\": j, \"type\":\r\n                last_move.action === \"take\" || last_move.action === \"move_from\" ?\r\n                  \"exit\" : \"enter\"\r\n              };\r\n              return;\r\n            }\r\n          }\r\n        });\r\n\r\n        return (\r\n          <Bar\r\n            key={i}\r\n            color={color}\r\n            mill={mill}\r\n            animation_type={animation_type}\r\n            animation_progression={animation_progression}\r\n          />\r\n        )\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        {this.getBars()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass Bar extends Component {\r\n\r\n  getColor = (color) => {\r\n    return color === \"B\" ? 'black-background' :\r\n        'white-background';\r\n  }\r\n\r\n  getBar = (dimensions) => {\r\n    return (\r\n      <div\r\n        className={\"bar \" + this.getColor(this.props.color)}\r\n        style={dimensions}\r\n      />\r\n    )\r\n  }\r\n\r\n  getBarSections = () => {\r\n    const {animation_type, animation_progression, mill} = this.props;\r\n    if (animation_type == null || animation_type.target !== 1) {\r\n      var min_x = Math.min(mill[0].x,mill[2].x);\r\n      var min_y = Math.min(mill[0].y,mill[2].y);\r\n      var max_x = Math.max(mill[0].x,mill[2].x);\r\n      var max_y = Math.max(mill[0].y,mill[2].y);\r\n      var size = 1;\r\n      if (animation_type != null) {\r\n        size = animation_type.type === \"enter\" ? animation_progression :\r\n         1 - animation_progression;\r\n      }\r\n      var dimensions = {\r\n        top: (100 * (min_y + (max_y - min_y) * (1 - size) / 2) + 95) * SCALE,\r\n        left: (100 * (min_x + (max_x - min_x) * (1 - size) / 2) + 95) * SCALE,\r\n        width: (((max_x - min_x) * 100 * size) + 10) * SCALE,\r\n        height: (((max_y - min_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      return this.getBar(dimensions);\r\n    } else {\r\n      min_x = Math.min(mill[0].x,mill[2].x);\r\n      min_y = Math.min(mill[0].y,mill[2].y);\r\n      var mid_x = mill[1].x;\r\n      var mid_y = mill[1].y;\r\n      max_x = Math.max(mill[0].x,mill[2].x);\r\n      max_y = Math.max(mill[0].y,mill[2].y);\r\n      size = animation_type.type === \"enter\" ? animation_progression :\r\n        1 - animation_progression;\r\n      var dimensions1 = {\r\n        top: (100 * min_y + 95) * SCALE,\r\n        left: (100 * min_x + 95) * SCALE,\r\n        width: (((mid_x - min_x) * 100 * size) + 10) * SCALE,\r\n        height: (((mid_y - min_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      var dimensions2 = {\r\n        top: (100 * (mid_y + (max_y - mid_y) * (1 - size)) + 95) * SCALE,\r\n        left: (100 * (mid_x + (max_x - mid_x) * (1 - size)) + 95) * SCALE,\r\n        width: (((max_x - mid_x) * 100 * size) + 10) * SCALE,\r\n        height: (((max_y - mid_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      return (\r\n        <React.Fragment>\r\n          {this.getBar(dimensions1)}{this.getBar(dimensions2)}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>{this.getBarSections()}</React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass Spaces extends Component {\r\n\r\n  makeMoveOnClick = (x, y) => {\r\n    if (this.tileIsActive(x,y))\r\n      this.props.makeMove(x,y)\r\n  }\r\n\r\n  tileIsActive = (x, y) => {\r\n    if (!this.props.player_turn) return false;\r\n    let isActive = false;\r\n    this.props.gs.possible_moves.forEach(item => {\r\n      if (x === item.x && y === item.y) {\r\n        isActive = true;\r\n        return;\r\n      }\r\n    });\r\n    return isActive;\r\n  }\r\n\r\n  getPieces = () => {\r\n    const {gs, player_turn} = this.props;\r\n    var last_moves = gs.last_moves();\r\n    let i = -1;\r\n    return (\r\n        gs.board.map((column,x) => {\r\n        return (column.map((tile, y) => {\r\n          i++;\r\n          let possibleMove = false;\r\n          if (player_turn) {\r\n            gs.possible_moves.forEach(move => {\r\n              if (move.x === x && move.y === y) {\r\n                possibleMove = true;\r\n                return;\r\n              }\r\n            });\r\n          }\r\n          let animation_type = null;\r\n          last_moves.forEach(move => {\r\n            if (move.command.x === x && move.command.y === y) {\r\n              if (move.action === \"move_from\" || move.action === \"take\")\r\n                animation_type = \"exit\";\r\n              else animation_type = \"enter\";\r\n              return;\r\n            }\r\n          });\r\n          if (tile != null) {\r\n            return (\r\n                <Space\r\n                x={x} y={y} type={tile} key={i}\r\n                possibleMove={possibleMove}\r\n                action={gs.action}\r\n                makeMoveOnClick={this.makeMoveOnClick}\r\n                animation_type={animation_type}\r\n                animation_progression={this.props.animation_progression}\r\n                />\r\n            );\r\n          } else return\r\n        }));\r\n      })\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return this.getPieces()\r\n  }\r\n}\r\n\r\nclass Space extends Component {\r\n\r\n\r\n  state = {\r\n    color: 'white'\r\n  }\r\n\r\n  getColor = (type) => {\r\n    return type === \"B\" ? \"black-background\" :\r\n                 type === \"W\" ? \"white-background\" : '';\r\n  }\r\n\r\n  componentDidUpdate = (prev_props) => {\r\n    if (prev_props.type === \"E\" && this.props.type !== \"E\") {\r\n      this.setState({color: this.getColor(this.props.type)});\r\n    }\r\n  }\r\n\r\n  getDimensions = () => {\r\n    var {animation_type, animation_progression} = this.props;\r\n    var size = animation_type === \"enter\" ? animation_progression :\r\n               animation_type === \"exit\" ? 1 - animation_progression : 1;\r\n    return {\r\n      top: (100 * this.props.y + 80 +\r\n      ((1 - size) * 20)) * SCALE,\r\n      left: (100 * this.props.x + 80 +\r\n      ((1 - size) * 20)) * SCALE,\r\n      width: size * 40 * SCALE,\r\n      height: size * 40 * SCALE\r\n    }\r\n  }\r\n\r\n  onMouseClick = () => {\r\n    this.props.makeMoveOnClick(this.props.x, this.props.y);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReactCursorPosition\r\n        activationInteractionMouse={INTERACTIONS.CLICK}\r\n        onActivationChanged={this.onMouseClick}\r\n      >\r\n        {this.props.possibleMove ? <><div className=\"piece\"\r\n          style ={{\r\n            top: (100 * this.props.y + 78) * SCALE,\r\n            left: (100 * this.props.x + 78) * SCALE,\r\n            width: 44 * SCALE,\r\n            height: 44 * SCALE,\r\n            backgroundColor: this.props.action === 'take' ? 'red' : 'black'\r\n          }}/>\r\n          <div className=\"piece\"\r\n            style={{\r\n                top: (100 * this.props.y + 80) * SCALE,\r\n                left: (100 * this.props.x + 80) * SCALE,\r\n                width: 40 * SCALE,\r\n                height: 40 * SCALE,\r\n                backgroundColor: 'white'\r\n          }}/></> : <div />}\r\n          {this.props.type === \"E\" && this.props.animation_type == null ? <div /> :\r\n          <div className={\"piece \" + this.state.color}\r\n          style={this.getDimensions()}/>}\r\n      </ReactCursorPosition>\r\n    )\r\n  }\r\n\r\n}\r\n","import score from './Score.js';\r\n\r\nconst EXPLORATION_PARAMETER = Math.sqrt(2);\r\n\r\nexport default function Node(gs) {\r\n  this.gs = gs;\r\n  this.children = new Map();\r\n  this.simulations = 0;\r\n  this.score = {\"B\": 0, \"W\": 0};\r\n  this.parent = null;\r\n}\r\n\r\nNode.prototype.toPrimitive = function(move) {\r\n  return move.x * 100 + move.y\r\n}\r\n\r\n/* Returns the child of this node bound to [move]. Creates a new node if\r\n  the child bound to [move] doesn't exist yet\r\n*/\r\nNode.prototype.get_child = function(move) {\r\n  let child = this.children.get(this.toPrimitive(move));\r\n  if (child == null) {\r\n    child = new Node(this.gs.clone().move(move));\r\n    child.parent = this;\r\n    this.children.set(this.toPrimitive(move), child);\r\n  }\r\n  return child;\r\n}\r\n\r\n// Expands the tree from this node randomly\r\nNode.prototype.expand = function() {\r\n  if (this.gs.possible_moves.length === 0) return this;\r\n  else return this.get_child(this.gs.random_move());\r\n}\r\n\r\n// Advances the tree by a move\r\nNode.prototype.advance = function(move) {\r\n  let child = this.get_child(move);\r\n  this.gs = child.gs;\r\n  this.children = child.children;\r\n  this.simulations = child.simulations;\r\n  this.score = child.score;\r\n  this.parent = null;\r\n}\r\n\r\n/* Plays out a game randomly from the current gamestate of this node. Returns\r\n  true if ai wins, else false */\r\nNode.prototype.simulate = function(n) {\r\n  let gs = this.gs.clone();\r\n  let i = 0;\r\n  while (i < n) {\r\n    if (gs.winner != null) break;\r\n    gs.move(gs.random_move());\r\n    i++;\r\n  }\r\n  this.backpropogate(score(gs));\r\n}\r\n\r\n/* Returns the best move for player whose turn it is on this node's gamestate */\r\nNode.prototype.best_move = function() {\r\n  let max_winrate = 0;\r\n  let best_move = null;\r\n  for (let i = 0; i < this.gs.possible_moves.length; i++) {\r\n    let move = this.gs.possible_moves[i];\r\n    let child = this.get_child(move);\r\n    let winrate = child.score[this.gs.turn] / child.simulations;\r\n    if (winrate > max_winrate) {\r\n      best_move = move;\r\n      max_winrate = winrate;\r\n    }\r\n  }\r\n  return best_move\r\n}\r\n\r\n/* Backpropogates the value of [s] from this node */\r\nNode.prototype.backpropogate = function(s) {\r\n  this.simulations++;\r\n  this.score[\"B\"] += s[\"B\"];\r\n  this.score[\"W\"] += s[\"W\"];\r\n  if (this.parent != null) this.parent.backpropogate(s);\r\n}\r\n\r\n//Returns the upper confidence bound of this node\r\nNode.prototype.UCT = function(move) {\r\n  let child = this.get_child(move);\r\n  if (child.simulations === 0) {\r\n    return 100;\r\n  }\r\n  return child.score[this.gs.turn] / child.simulations + EXPLORATION_PARAMETER * Math.sqrt(Math.log(this.simulations) / child.simulations);\r\n}\r\n\r\n// Returns true if current node is leaf, else false\r\nNode.prototype.is_leaf = function() {\r\n  return (this.children.size === 0 || this.gs.possible_moves.length === 0);\r\n}\r\n\r\n/* Travels down the tree until hitting a leaf node and returns it, selecting\r\n   a new Node based on the max UCT among a node's children */\r\nNode.prototype.select = function() {\r\n  if (this.is_leaf()) return this;\r\n  let selectedMove = this.gs.possible_moves[0];\r\n  let maxUCT = this.UCT(selectedMove);\r\n  for (let i = 1; i < this.gs.possible_moves.length; i++) {\r\n    let move = this.gs.possible_moves[i];\r\n    let uct = this.UCT(move);\r\n    if (uct > maxUCT) {\r\n      selectedMove = move;\r\n      maxUCT = uct;\r\n    }\r\n    if (maxUCT === 100) break;\r\n  }\r\n  return this.get_child(selectedMove).select()\r\n}\r\n","import Node from './Node.js';\r\n\r\nexport default function AI(gs, color) {\r\n  this.tree = new Node(gs, color);\r\n  this.interval = null;\r\n  this.color = color;\r\n}\r\n\r\nAI.prototype.iterate = function(n) {\r\n  if (n <= 0) {\r\n    return;\r\n  }\r\n  this.tree.select().expand().simulate(50);\r\n  this.iterate(n-1);\r\n}\r\n\r\nAI.prototype.register_move = function(move) {\r\n  this.tree.advance(move);\r\n}\r\n\r\nAI.prototype.best_move = function() {\r\n  return this.tree.best_move();\r\n}\r\n\r\nAI.prototype.win_chance = function() {\r\n  return this.tree.score[this.color] / this.tree.simulations;\r\n}\r\n","\r\n/* Returns the score in [0,1] representing standing for both players\r\n  1 if win, 0 if loss, or some value on (0,1) based on material\r\n*/\r\nexport default function score(gs) {\r\n  let score;\r\n  if (gs.winner === \"B\") score = 1;\r\n  else if (gs.winner === \"W\") score = 0;\r\n  else {\r\n    let diff = Math.abs(gs.pieces[\"B\"] - gs.pieces[\"W\"]);\r\n    score =\r\n    gs.pieces[\"B\"] > gs.pieces[\"W\"] ? (diff + 1) / (diff + 2) :\r\n    1 / (diff + 2);\r\n  }\r\n  return {\"B\": score, \"W\": 1 - score}\r\n}\r\n","import board_layouts from './Layouts.js';\r\nimport _ from 'lodash';\r\n\r\nexport default function Gamestate(board_type, turn) {\r\n  //Player's whose turn it is\r\n  this.turn = turn;\r\n  //Action to do\r\n  this.action = \"place\";\r\n  //Moves since the beginning of the game\r\n  this.place_count = 1;\r\n  //Board type\r\n  this.board_type = board_type;\r\n  /* Array representing the game board\r\n     For each tile on the board, \"B\" represents a black piece,\r\n     \"W\" a white piece, \"E\" an empty spot, and null no spot at all */\r\n  this.board = JSON.parse(JSON.stringify(board_layouts[this.board_type].init));\r\n  // Temporary placeholder for selected tile after 'move_from' command\r\n  this.selected = null;\r\n  // List of all possible moves from posititon\r\n  this.possible_moves = [];\r\n  // Tuple representing the pieces in game for black and white\r\n  this.pieces = {\"B\": 0, \"W\": 0};\r\n  this.winner = null;\r\n\r\n  this.history = [];\r\n\r\n  this.mills = {\"B\": [], \"W\": []};\r\n\r\n  this.get_possible_moves();\r\n}\r\n\r\n/* Returns a random valid move for this gamestate */\r\nGamestate.prototype.random_move = function() {\r\n  return this.possible_moves[Math.floor(Math.random()*this.possible_moves.length)];\r\n}\r\n\r\n/* Returns the last move that was made */\r\nGamestate.prototype.last_moves = function() {\r\n  let last_moves = [];\r\n  if (this.history.length > 0 && this.action !== \"move_to\") {\r\n    last_moves.push(this.history[this.history.length - 1]);\r\n    if (last_moves[0].action === \"move_to\")\r\n      last_moves.push(this.history[this.history.length - 2]);\r\n  }\r\n  return last_moves;\r\n}\r\n/* Sets the winner of the game to [color]*/\r\nGamestate.prototype.setWinner = function (color) {\r\n  this.winner = color;\r\n  this.possible_moves = [];\r\n}\r\n\r\n/* Returns true if the placing phase has passed, else false */\r\nGamestate.prototype.second_phase = function() {\r\n  return this.place_count > board_layouts[this.board_type].pieces * 2\r\n}\r\n\r\n/* Clones this game state */\r\nGamestate.prototype.clone = function() {\r\n  let clone = new Gamestate(this.board_type, this.turn);\r\n  clone.action = this.action;\r\n  clone.place_count = this.place_count;\r\n  clone.board = JSON.parse(JSON.stringify(this.board));\r\n  clone.selected = Object.assign({},this.selected);\r\n  clone.possible_moves = JSON.parse(JSON.stringify(this.possible_moves));\r\n  clone.pieces = Object.assign({},this.pieces);\r\n  clone.winner = this.winner;\r\n  clone.mills = JSON.parse(JSON.stringify(this.mills));\r\n  clone.history = JSON.parse(JSON.stringify(this.history));\r\n  return clone;\r\n}\r\n\r\n// Executes a move based on the command and returns/updates the resulting state\r\nGamestate.prototype.move = function(command) {\r\n  const board_info = board_layouts[this.board_type];\r\n\r\n  //checks command validity\r\n  let valid_command = false;\r\n  for (let i = 0; i < this.possible_moves.length; i++) {\r\n    if (_.isEqual(this.possible_moves[i], command)) {\r\n      valid_command = true;\r\n       break;\r\n    }\r\n  }\r\n  if (!valid_command) throw console.error(\"Invalid Command:\", command);\r\n\r\n  this.history.push({\"action\": this.action, \"command\": command, \"color\": this.turn})\r\n\r\n  //evaluates command and constructs new state\r\n  if (this.action === \"place\" || this.action === \"move_to\") {\r\n    this.board[command.x][command.y] = this.turn;\r\n\r\n    if (this.action === \"move_to\") {\r\n      this.board[this.selected.x][this.selected.y] = \"E\";\r\n      this.selected = null;\r\n    } else {\r\n      this.place_count++;\r\n      this.pieces[this.turn] += 1;\r\n    }\r\n\r\n    //checks if new place for piece would newly form a mill\r\n    let is_new_mill = false;\r\n    for (let i = 0; i < board_info.mills.length; i++) {\r\n      const mill = board_info.mills[i];\r\n\r\n      let new_piece_in_mill = false;\r\n      let is_in_mill = true;\r\n      mill.forEach(loc => {\r\n        if (this.board[loc.x][loc.y] !== this.turn) {\r\n          is_in_mill = false;\r\n        }\r\n        if (_.isEqual(loc, command)) {\r\n          new_piece_in_mill = true;\r\n        }\r\n      });\r\n      if (is_in_mill && new_piece_in_mill) {\r\n        this.mills[this.turn].push(mill);\r\n        is_new_mill = true;\r\n      }\r\n    }\r\n\r\n    //makes adjustments to state based on move\r\n    if (is_new_mill) {\r\n      this.action = \"take\";\r\n    } else {\r\n      this.turn = this.turn === \"W\" ? \"B\" : \"W\";\r\n      if (this.second_phase()) {\r\n        this.action = \"move_from\";\r\n      }\r\n    }\r\n  } else if (this.action === \"move_from\") {\r\n    this.selected = command;\r\n    this.action = \"move_to\";\r\n    for (let i = 0; i < this.mills[this.turn].length; i++) {\r\n      this.mills[this.turn][i].forEach(loc => {\r\n        if (_.isEqual(loc, command)) {\r\n          this.mills[this.turn].splice(i);\r\n          i--;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  } else if (this.action === \"take\") {\r\n    //evaluates command and constructs new state\r\n    this.board[command.x][command.y] = \"E\";\r\n    const opp = this.turn === \"W\" ? \"B\" : \"W\";\r\n    this.pieces[opp] -= 1;\r\n\r\n    //makes adjustments to state based on move\r\n    if (this.second_phase()) {\r\n      if (this.pieces[opp] < 3) {\r\n        this.setWinner(this.turn);\r\n        return this;\r\n      }\r\n      this.action = \"move_from\";\r\n    } else {\r\n      this.action = \"place\";\r\n    }\r\n    this.turn = opp;\r\n  }\r\n  this.get_possible_moves();\r\n  if (this.possible_moves.length === 0) {\r\n      this.setWinner(this.turn === \"W\" ? \"B\" : \"W\");\r\n  }\r\n  return this;\r\n}\r\n\r\n// Returns/updates a list of possible moves from this state\r\nGamestate.prototype.get_possible_moves = function () {\r\n  if (this.winner != null) {\r\n    this.possible_moves = [];\r\n    return [];\r\n  }\r\n\r\n  const possible_moves = [];\r\n  const board = this.board;\r\n  const board_info = board_layouts[this.board_type];\r\n  if (this.action === \"move_to\") {\r\n    board_info.adjecencies[this.selected.x][this.selected.y].forEach(loc => {\r\n      if (board[loc.x][loc.y] === \"E\") {\r\n        possible_moves.push({x: loc.x, y: loc.y});\r\n      }\r\n    });\r\n    this.possible_moves = possible_moves;\r\n    return possible_moves;\r\n  }\r\n  for (let x = 0; x < board.length; x++) {\r\n    for (let y = 0; y < board[x].length; y++) {\r\n      if (this.action === \"place\") {\r\n        if (board[x][y] === \"E\") {\r\n          possible_moves.push({x: x, y: y});\r\n        }\r\n      } else if (this.action === \"move_from\") {\r\n        //Checks if origin is of player int turn's color\r\n        if (board[x][y] === this.turn) {\r\n          //Checks for each adjacency wheter destination is empty\r\n          let adjecencies = board_info.adjecencies[x][y];\r\n          for (let i = 0; i < adjecencies.length; i++) {\r\n            let loc = adjecencies[i];\r\n            if (board[loc.x][loc.y] === \"E\") {\r\n              possible_moves.push({x: x, y: y});\r\n            }\r\n          }\r\n        }\r\n      } else if (this.action === \"take\") {\r\n        //check if tile to take is other player's\r\n        const opposite = this.turn === \"W\" ? \"B\" : \"W\";\r\n        if (board[x][y] !== opposite) continue;\r\n\r\n        //checks if tile to take is in mill\r\n        let is_in_mill = false;\r\n        for (let i = 0; i < this.mills[opposite].length; i++) {\r\n          this.mills[opposite][i].forEach(loc => {\r\n            if (loc.x === x && loc.y === y) {\r\n              is_in_mill = true;\r\n              return;\r\n            }\r\n          });\r\n          if (is_in_mill) break;\r\n        }\r\n\r\n        //If tile is not in opposing mill, then taking it is possible\r\n        if (!is_in_mill) {\r\n          possible_moves.push({x: x, y: y});\r\n        }\r\n      } else {\r\n        throw new Error(\"Gamestate.action must be 'place', 'move_to', 'move_from', or 'take'\");\r\n      }\r\n    }\r\n  }\r\n  this.possible_moves = possible_moves;\r\n  return possible_moves;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board.js';\r\nimport AI from './AI.js';\r\nimport './style/app.css';\r\nimport Gamestate from './Gamestate.js';\r\n\r\nimport { AppBar, Button, Typography, Container, ButtonGroup, Grid, Paper, Card, CardContent, Toolbar, Box, LinearProgress} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\"\r\n\r\nconst gameTypes = [\r\n  {innerHTML: \"Single Player vs AI\", id: 'single_player'},\r\n  {innerHTML: \"Multiplayer\", id: 'multi_player'}\r\n]\r\n\r\nconst color = [\r\n  {innerHTML: \"Black\", id: \"B\"},\r\n  {innerHTML: \"White\", id: \"W\"}\r\n]\r\n\r\nconst ANIMATION_LENGTH = 200;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    gs: new Gamestate(\"board_standard\", \"W\"),\r\n    ai: null,\r\n    animation_progression: 1,\r\n    is_animating: false,\r\n    ai_interval: null,\r\n    game_type: \"multi_player\",\r\n    color: \"W\",\r\n    think_time: 3,\r\n    think_progression: 0,\r\n    simulations: 0,\r\n    ai_win_chance: .5\r\n  }\r\n\r\n  runAI = () => {\r\n    let ai_interval = setInterval(() => this.state.ai.iterate(10), 10);\r\n    this.setState({ai_interval});\r\n  }\r\n\r\n  stopAI = () => {\r\n    clearInterval(this.state.ai_interval);\r\n  }\r\n\r\n  makeMove = (x, y) => {\r\n    let gs = this.state.gs.move({x: x, y: y});\r\n    let ai = this.state.ai;\r\n    if (ai != null) {\r\n      this.setState({\r\n        simulations: ai.tree.simulations,\r\n      });\r\n      ai.register_move({x: x, y: y});\r\n    }\r\n    this.setState({gs, ai},\r\n      this.state.gs.action !== \"move_to\" ? this.doMoveAnimation() : () => {},\r\n      this.checkAIMove(),\r\n      ai != null ? this.setState({ai_win_chance: ai.win_chance()}) : () => {}\r\n    );\r\n  }\r\n\r\n  doMoveAnimation = () => {\r\n    this.setState({animation_progression: 0, is_animating: true});\r\n    if (this.state.ai != null) this.stopAI();\r\n    const start = Date.now();\r\n    let animation_interval = setInterval(() => {\r\n      this.setState({animation_progression:\r\n        (Date.now() - start) / ANIMATION_LENGTH\r\n      });\r\n    }, 10);\r\n    setTimeout(() => {\r\n      clearInterval(animation_interval);\r\n      this.setState({animation_progression: 1, is_animating: false});\r\n      if (this.state.ai != null) this.runAI();\r\n    }, ANIMATION_LENGTH);\r\n  }\r\n\r\n  checkAIMove = () => {\r\n    if (this.state.gs.winner != null) {\r\n      this.stopAI();\r\n      return;\r\n    }\r\n    if (!this.player_turn()) {\r\n      let timeout = this.state.think_time * 1000;\r\n      if (this.state.gs.action === \"move_to\") timeout = 0;\r\n      const start = Date.now();\r\n      let think_interval = setInterval(() => {\r\n        this.setState({think_progression:\r\n          (Date.now() - start) / this.state.think_time / 1000\r\n        });\r\n      }, 10);\r\n      setTimeout(() => {\r\n        clearInterval(think_interval);\r\n        this.setState({think_progression: 0});\r\n        if (this.state.ai == null) return;\r\n        let move = this.state.ai.best_move();\r\n        this.makeMove(move.x,move.y);\r\n      }, timeout)\r\n    }\r\n  }\r\n\r\n  onGameTypeToggle = (game_type) => {\r\n    this.setState({game_type});\r\n  }\r\n\r\n  onColorToggle = (color) => {\r\n    this.setState({color});\r\n  }\r\n\r\n  player_turn = () => {\r\n    return this.state.ai != null ?\r\n      this.state.ai.color !== this.state.gs.turn : true;\r\n  }\r\n\r\n  onStart = () => {\r\n    let gs = new Gamestate(\"board_standard\", \"W\");\r\n    let ai = null;\r\n    let ai_interval = null;\r\n    clearInterval(this.state.ai_interval);\r\n    if (this.state.game_type === \"single_player\") {\r\n      ai = new AI(gs, this.state.color === \"B\" ? \"W\" : \"B\");\r\n    }\r\n    this.setState({gs, ai, ai_interval}, () => {\r\n      if (ai != null) {\r\n        this.runAI();\r\n        this.checkAIMove();\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Nav />\r\n        <Container maxWidth=\"sm\">\r\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center stretch\" spacing={3}>\r\n            {[\r\n            <React.Fragment>\r\n              <Info\r\n                gs={this.state.gs}\r\n                ai={this.state.ai}\r\n                think_progression={this.state.think_progression}\r\n                simulations={this.state.simulations}\r\n                ai_win_chance={this.state.ai_win_chance}\r\n              />\r\n              <Board\r\n                gs={this.state.gs}\r\n                makeMove={this.makeMove}\r\n                player_turn={this.player_turn()}\r\n                animation_progression={this.state.animation_progression}\r\n                is_animating={this.state.is_animating}\r\n              />\r\n            </React.Fragment>,\r\n            <Settings\r\n              game_type={this.state.game_type}\r\n              color={this.state.color}\r\n              onGameTypeToggle={this.onGameTypeToggle}\r\n              onColorToggle={this.onColorToggle}\r\n              onStart={this.onStart}\r\n            />].map(element => {\r\n              return (\r\n                <Grid item xs={12}>\r\n                  <Card elevation={3} className=\"fullWidth\">\r\n                    <CardContent>{element}</CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass Settings extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n          <Box mb={2} display=\"flex\">\r\n            <Box flexGrow={1}>\r\n              <ButtonGroup size=\"small\" variant=\"outlined\" color=\"default\" aria-label=\"outlined primary button group\">{\r\n                gameTypes.map(type => (\r\n                  <Button key={type.id} disabled={type.id === this.props.game_type}\r\n                    variant={type.id === this.props.game_type ? \"contained\" : \"outlined\"}\r\n                    onClick={() => this.props.onGameTypeToggle(type.id)}>\r\n                    <Typography variant=\"button\">{type.innerHTML}</Typography>\r\n                  </Button>\r\n                ))}\r\n              </ButtonGroup>\r\n            </Box>\r\n            {\r\n              this.props.game_type === \"single_player\" ?\r\n              <Box ml={2}>\r\n                <ButtonGroup size=\"small\" variant=\"outlined\" color=\"default\" aria-label=\"outlined primary button group\">{\r\n                  color.map(type => (\r\n                    <Button key={type.id} disabled={type.id === this.props.color}\r\n                      variant={type.id === this.props.color ? \"contained\" : \"outlined\"}\r\n                      onClick={() => this.props.onColorToggle(type.id)}>\r\n                      <Typography variant=\"button\">{type.innerHTML}</Typography>\r\n                    </Button>\r\n                  ))}\r\n                </ButtonGroup>\r\n              </Box> : <div />\r\n            }\r\n          </Box>\r\n          <Button variant=\"contained\" size = \"small\" color=\"primary\" onClick={this.props.onStart}>Start!</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Info extends Component {\r\n\r\n  state = {\r\n    win_chance: .5,\r\n    simulations: 0\r\n  }\r\n\r\n  getMoveText = () => {\r\n    const {gs, ai} = this.props;\r\n    var color = gs.winner != null ? gs.winner : gs.turn;\r\n    return (\r\n      <Typography variant=\"subtitle1\" className={color === \"B\" ? \"var-black\" : \"var-white\"}>{\r\n        (ai == null ?\r\n        (color === \"B\" ? \"black\" : \"white\") :\r\n        color === ai.color ? \"ai\" : \"player\") +\r\n        (gs.winner === \"B\" ? \" wins!\" :\r\n        gs.winner === \"W\" ? \" wins!\" :\r\n        (\" to \" + (gs.action === \"place\" ? \"place\" :\r\n          gs.action === \"take\" ? \"take\" : \"move\")))\r\n      }</Typography>\r\n    )\r\n  }\r\n\r\n  getWinChanceText = () => {\r\n    return (\r\n      this.props.ai == null ? <div /> :\r\n      <Typography variant=\"subtitle1\">{'AI winning chance: ' + (this.props.ai_win_chance + \"\").substring(0,5)}</Typography>\r\n    )\r\n  }\r\n\r\n  getSimCountText = () => {\r\n    return (\r\n      this.props.ai == null ? <div /> :\r\n      <Typography variant=\"subtitle1\">{'Simulations run: ' + this.props.simulations}</Typography>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Box mb={2} display=\"flex\">\r\n        <Box flexGrow={1}>{this.getMoveText()}</Box><br />\r\n      <Box mr={2}>{this.getWinChanceText()}</Box>\r\n        <Box>{this.getSimCountText()}</Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nclass Nav extends Component {\r\n  render () {\r\n    return (\r\n      <AppBar position=\"static\" style={{\"margin-bottom\": \"16px\"}}>\r\n        <Toolbar style={{\"min-height\": \"48px\"}}>\r\n          <Typography variant=\"h6\" color=\"inherit\">Mill-AI</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\r\nimport 'bootstrap';\r\nimport App from \"./App\";\n\r\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}