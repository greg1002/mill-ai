{"version":3,"sources":["Board.js","MCTS.js","Score.js","Gamestate.js","App.js","index.js"],"names":["Board","this","props","gs","animation_progression","is_animating","makeMove","player_turn","board_layout","board_layouts","board_type","className","style","width","x","height","y","src","image","Component","Bars","state","mills","update_lock","componentDidUpdate","prev_props","action","forEach","mill","push","color","setState","getBars","last_moves","map","item","i","animation_type","last_move","j","length","loc","command","key","Fragment","Bar","getColor","getBar","dimensions","getBarSections","target","min_x","Math","min","min_y","max_x","max","max_y","size","type","top","left","mid_x","mid_y","dimensions1","dimensions2","Spaces","makeMoveOnClick","tileIsActive","isActive","possible_moves","getPieces","board","column","tile","possibleMove","move","Space","getDimensions","onMouseClick","ReactCursorPosition","activationInteractionMouse","INTERACTIONS","CLICK","onActivationChanged","backgroundColor","EXPLORATION_PARAMETER","sqrt","MCTS","tree","Node","interval","children","Map","simulations","score","parent","prototype","iterate","n","select","expand","simulate","register_move","advance","best_move","win_chance","toPrimitive","get_child","child","get","clone","set","random_move","winner","backpropogate","diff","abs","pieces","max_winrate","winrate","turn","s","UCT","log","is_leaf","selectedMove","maxUCT","uct","Gamestate","place_count","JSON","parse","stringify","init","selected","pieces_left_to_place","history","get_possible_moves","pieces_to_place","floor","random","setWinner","second_phase","Object","assign","board_info","valid_command","_","isEqual","console","error","is_new_mill","new_piece_in_mill","is_in_mill","splice","opp","adjecencies","Error","opposite","gameTypes","innerHTML","id","boardTypes","App","ai","ai_interval","game_type","think_time","think_progression","ai_win_chance","runAI","setInterval","stopAI","clearInterval","doMoveAnimation","checkAIMove","start","Date","now","animation_interval","setTimeout","timeout","think_interval","onGameTypeToggle","onColorToggle","onBoardTypeToggle","onStart","Container","maxWidth","Grid","container","direction","justify","alignItems","spacing","element","xs","Card","elevation","CardContent","Settings","getButton","options","activeOption","onToggle","ButtonGroup","variant","aria-label","option","Button","disabled","onClick","Typography","Box","mb","display","flexGrow","ml","TopInfo","getMoveText","getWinChanceText","substring","getSimCountText","mr","BottomInfo","getBlackPieceCountText","getWhitePieceCountText","mt","Nav","AppBar","position","Toolbar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54e1161e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport board_layouts from './layouts.json';\r\nimport './style/app.css';\r\nimport ReactCursorPosition, { INTERACTIONS } from 'react-cursor-position';\r\n\r\nconst SCALE = .5;\r\n\r\nexport default class Board extends Component {\r\n\r\n  render() {\r\n    const {gs, animation_progression, is_animating, makeMove, player_turn} = this.props;\r\n    const board_layout = board_layouts[gs.board_type];\r\n    return (\r\n      <div className=\"board-backdrop\">\r\n        <div className=\"board\" style={{width: (board_layout.x + 1) * 100 * SCALE, height: (board_layout.y + 1) * 100 * SCALE}}>\r\n          <img src={board_layout.image} />\r\n          <Bars\r\n            gs={gs}\r\n            animation_progression={animation_progression}\r\n            is_animating={is_animating}\r\n          />\r\n          <Spaces\r\n            gs={gs}\r\n            player_turn={player_turn}\r\n            animation_progression={animation_progression}\r\n            makeMove={makeMove}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Bars extends Component {\r\n\r\n  state = {\r\n    mills: [],\r\n    update_lock: true\r\n  }\r\n\r\n  componentDidUpdate = (prev_props) => {\r\n    const {gs, is_animating} = this.props;\r\n    if (gs.action === \"move_to\") return;\r\n\r\n    if (this.state.update_lock && prev_props.is_animating !== is_animating) {\r\n      var mills = [];\r\n      if (is_animating) {\r\n        mills = this.state.mills;\r\n      }\r\n      gs.mills[\"B\"].forEach(mill => {\r\n        mills.push({mill: mill, color: \"B\"});\r\n      });\r\n      gs.mills[\"W\"].forEach(mill => {\r\n        mills.push({mill: mill, color: \"W\"});\r\n      });\r\n      this.setState({mills, update_lock: false});\r\n    } else if (!this.state.update_lock && prev_props.is_animating === is_animating) {\r\n      this.setState({update_lock: true})\r\n    }\r\n  }\r\n\r\n  getBars = () => {\r\n    const {gs, animation_progression} = this.props\r\n    const last_moves = gs.last_moves();\r\n    return this.state.mills.map((item, i) => {\r\n        const {mill, color} = item;\r\n        var animation_type = null;\r\n        last_moves.forEach(last_move => {\r\n          for (let j = 0; j < mill.length; j++) {\r\n            var loc = mill[j];\r\n            if (last_move.command.x === loc.x && last_move.command.y === loc.y) {\r\n              animation_type = {\"target\": j, \"type\":\r\n                last_move.action === \"take\" || last_move.action === \"move_from\" ?\r\n                  \"exit\" : \"enter\"\r\n              };\r\n              return;\r\n            }\r\n          }\r\n        });\r\n\r\n        return (\r\n          <Bar\r\n            key={i}\r\n            color={color}\r\n            mill={mill}\r\n            animation_type={animation_type}\r\n            animation_progression={animation_progression}\r\n          />\r\n        )\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>\r\n        {this.getBars()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass Bar extends Component {\r\n\r\n  getColor = (color) => {\r\n    return color === \"B\" ? 'black-background' :\r\n        'white-background';\r\n  }\r\n\r\n  getBar = (dimensions) => {\r\n    return (\r\n      <div\r\n        className={\"bar \" + this.getColor(this.props.color)}\r\n        style={dimensions}\r\n      />\r\n    )\r\n  }\r\n\r\n  getBarSections = () => {\r\n    const {animation_type, animation_progression, mill} = this.props;\r\n    if (animation_type == null || animation_type.target !== 1) {\r\n      var min_x = Math.min(mill[0].x,mill[2].x);\r\n      var min_y = Math.min(mill[0].y,mill[2].y);\r\n      var max_x = Math.max(mill[0].x,mill[2].x);\r\n      var max_y = Math.max(mill[0].y,mill[2].y);\r\n      var size = 1;\r\n      if (animation_type != null) {\r\n        size = animation_type.type === \"enter\" ? animation_progression :\r\n         1 - animation_progression;\r\n      }\r\n      var dimensions = {\r\n        top: (100 * (min_y + (max_y - min_y) * (1 - size) / 2) + 95) * SCALE,\r\n        left: (100 * (min_x + (max_x - min_x) * (1 - size) / 2) + 95) * SCALE,\r\n        width: (((max_x - min_x) * 100 * size) + 10) * SCALE,\r\n        height: (((max_y - min_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      return this.getBar(dimensions);\r\n    } else {\r\n      min_x = Math.min(mill[0].x,mill[2].x);\r\n      min_y = Math.min(mill[0].y,mill[2].y);\r\n      var mid_x = mill[1].x;\r\n      var mid_y = mill[1].y;\r\n      max_x = Math.max(mill[0].x,mill[2].x);\r\n      max_y = Math.max(mill[0].y,mill[2].y);\r\n      size = animation_type.type === \"enter\" ? animation_progression :\r\n        1 - animation_progression;\r\n      var dimensions1 = {\r\n        top: (100 * min_y + 95) * SCALE,\r\n        left: (100 * min_x + 95) * SCALE,\r\n        width: (((mid_x - min_x) * 100 * size) + 10) * SCALE,\r\n        height: (((mid_y - min_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      var dimensions2 = {\r\n        top: (100 * (mid_y + (max_y - mid_y) * (1 - size)) + 95) * SCALE,\r\n        left: (100 * (mid_x + (max_x - mid_x) * (1 - size)) + 95) * SCALE,\r\n        width: (((max_x - mid_x) * 100 * size) + 10) * SCALE,\r\n        height: (((max_y - mid_y) * 100 * size) + 10) * SCALE\r\n      }\r\n      return (\r\n        <React.Fragment>\r\n          {this.getBar(dimensions1)}{this.getBar(dimensions2)}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <React.Fragment>{this.getBarSections()}</React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nclass Spaces extends Component {\r\n\r\n  makeMoveOnClick = (x, y) => {\r\n    if (this.tileIsActive(x,y))\r\n      this.props.makeMove(x,y)\r\n  }\r\n\r\n  tileIsActive = (x, y) => {\r\n    if (!this.props.player_turn) return false;\r\n    let isActive = false;\r\n    this.props.gs.possible_moves.forEach(item => {\r\n      if (x === item.x && y === item.y) {\r\n        isActive = true;\r\n        return;\r\n      }\r\n    });\r\n    return isActive;\r\n  }\r\n\r\n  getPieces = () => {\r\n    const {gs, player_turn} = this.props;\r\n    var last_moves = gs.last_moves();\r\n    let i = -1;\r\n    return (\r\n        gs.board.map((column,x) => {\r\n        return (column.map((tile, y) => {\r\n          i++;\r\n          let possibleMove = false;\r\n          if (player_turn) {\r\n            gs.possible_moves.forEach(move => {\r\n              if (move.x === x && move.y === y) {\r\n                possibleMove = true;\r\n                return;\r\n              }\r\n            });\r\n          }\r\n          let animation_type = null;\r\n          last_moves.forEach(move => {\r\n            if (move.command.x === x && move.command.y === y) {\r\n              if (move.action === \"move_from\" || move.action === \"take\")\r\n                animation_type = \"exit\";\r\n              else animation_type = \"enter\";\r\n              return;\r\n            }\r\n          });\r\n          if (tile != null) {\r\n            return (\r\n                <Space\r\n                x={x} y={y} type={tile} key={i}\r\n                possibleMove={possibleMove}\r\n                action={gs.action}\r\n                makeMoveOnClick={this.makeMoveOnClick}\r\n                animation_type={animation_type}\r\n                animation_progression={this.props.animation_progression}\r\n                />\r\n            );\r\n          } else return\r\n        }));\r\n      })\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return this.getPieces()\r\n  }\r\n}\r\n\r\nclass Space extends Component {\r\n\r\n\r\n  state = {\r\n    color: 'white'\r\n  }\r\n\r\n  getColor = (type) => {\r\n    return type === \"B\" ? \"black-background\" :\r\n                 type === \"W\" ? \"white-background\" : '';\r\n  }\r\n\r\n  componentDidUpdate = (prev_props) => {\r\n    if (prev_props.type === \"E\" && this.props.type !== \"E\") {\r\n      this.setState({color: this.getColor(this.props.type)});\r\n    }\r\n  }\r\n\r\n  getDimensions = () => {\r\n    var {animation_type, animation_progression} = this.props;\r\n    var size = animation_type === \"enter\" ? animation_progression :\r\n               animation_type === \"exit\" ? 1 - animation_progression : 1;\r\n    return {\r\n      top: (100 * this.props.y + 80 +\r\n      ((1 - size) * 20)) * SCALE,\r\n      left: (100 * this.props.x + 80 +\r\n      ((1 - size) * 20)) * SCALE,\r\n      width: size * 40 * SCALE,\r\n      height: size * 40 * SCALE\r\n    }\r\n  }\r\n\r\n  onMouseClick = () => {\r\n    this.props.makeMoveOnClick(this.props.x, this.props.y);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReactCursorPosition\r\n        activationInteractionMouse={INTERACTIONS.CLICK}\r\n        onActivationChanged={this.onMouseClick}\r\n      >\r\n        {this.props.possibleMove ? <><div className=\"piece\"\r\n          style ={{\r\n            top: (100 * this.props.y + 78) * SCALE,\r\n            left: (100 * this.props.x + 78) * SCALE,\r\n            width: 44 * SCALE,\r\n            height: 44 * SCALE,\r\n            backgroundColor: this.props.action === 'take' ? 'red' : 'black'\r\n          }}/>\r\n          <div className=\"piece\"\r\n            style={{\r\n                top: (100 * this.props.y + 80) * SCALE,\r\n                left: (100 * this.props.x + 80) * SCALE,\r\n                width: 40 * SCALE,\r\n                height: 40 * SCALE,\r\n                backgroundColor: 'white'\r\n          }}/></> : <div />}\r\n          {this.props.type === \"E\" && this.props.animation_type == null ? <div /> :\r\n          <div className={\"piece \" + this.state.color}\r\n          style={this.getDimensions()}/>}\r\n      </ReactCursorPosition>\r\n    )\r\n  }\r\n\r\n}\r\n","import score from './Score.js';\r\n\r\nconst EXPLORATION_PARAMETER = Math.sqrt(2);\r\n\r\nexport default function MCTS(gs, color) {\r\n  this.tree = new Node(gs, color);\r\n  this.interval = null;\r\n  this.color = color;\r\n}\r\n\r\nMCTS.prototype.iterate = function(n) {\r\n  if (n <= 0) {\r\n    return;\r\n  }\r\n  this.tree.select().expand().simulate(25);\r\n  this.iterate(n-1);\r\n}\r\n\r\nMCTS.prototype.register_move = function(move) {\r\n  this.tree.advance(move);\r\n}\r\n\r\nMCTS.prototype.best_move = function() {\r\n  return this.tree.best_move();\r\n}\r\n\r\nMCTS.prototype.win_chance = function() {\r\n  return this.tree.score[this.color] / this.tree.simulations;\r\n}\r\n\r\nfunction Node(gs) {\r\n  this.gs = gs;\r\n  this.children = new Map();\r\n  this.simulations = 0;\r\n  this.score = {\"B\": 0, \"W\": 0};\r\n  this.parent = null;\r\n}\r\n\r\nNode.prototype.toPrimitive = function(move) {\r\n  return move.x * 100 + move.y\r\n}\r\n\r\n/* Returns the child of this node bound to [move]. Creates a new node if\r\n  the child bound to [move] doesn't exist yet\r\n*/\r\nNode.prototype.get_child = function(move) {\r\n  let child = this.children.get(this.toPrimitive(move));\r\n  if (child == null) {\r\n    child = new Node(this.gs.clone().move(move));\r\n    child.parent = this;\r\n    this.children.set(this.toPrimitive(move), child);\r\n  }\r\n  return child;\r\n}\r\n\r\n// Expands the tree from this node randomly\r\nNode.prototype.expand = function() {\r\n  if (this.gs.possible_moves.length === 0) return this;\r\n  else return this.get_child(this.gs.random_move());\r\n}\r\n\r\n// Advances the tree by a move\r\nNode.prototype.advance = function(move) {\r\n  let child = this.get_child(move);\r\n  this.gs = child.gs;\r\n  this.children = child.children;\r\n  this.simulations = child.simulations;\r\n  this.score = child.score;\r\n  this.parent = null;\r\n}\r\n\r\n/* Plays out a game randomly from the current gamestate of this node. Returns\r\n  true if ai wins, else false */\r\nNode.prototype.simulate = function(n) {\r\n  let gs = this.gs.clone();\r\n  let i = 0;\r\n  while (i < n) {\r\n    if (gs.winner != null) break;\r\n    gs.move(gs.random_move());\r\n    i++;\r\n  }\r\n  this.backpropogate(score(gs));\r\n}\r\n\r\n/* Returns the best move for player whose turn it is on this node's gamestate */\r\nNode.prototype.best_move = function() {\r\n  let max_winrate = 0;\r\n  let best_move = null;\r\n  for (let i = 0; i < this.gs.possible_moves.length; i++) {\r\n    let move = this.gs.possible_moves[i];\r\n    let child = this.get_child(move);\r\n    let winrate = child.score[this.gs.turn] / child.simulations;\r\n    if (winrate > max_winrate) {\r\n      best_move = move;\r\n      max_winrate = winrate;\r\n    }\r\n  }\r\n  return best_move\r\n}\r\n\r\n/* Backpropogates the value of [s] from this node */\r\nNode.prototype.backpropogate = function(s) {\r\n  this.simulations++;\r\n  this.score[\"B\"] += s[\"B\"];\r\n  this.score[\"W\"] += s[\"W\"];\r\n  if (this.parent != null) this.parent.backpropogate(s);\r\n}\r\n\r\n//Returns the upper confidence bound of this node\r\nNode.prototype.UCT = function(move) {\r\n  let child = this.get_child(move);\r\n  if (child.simulations === 0) {\r\n    return 100;\r\n  }\r\n  return child.score[this.gs.turn] / child.simulations + EXPLORATION_PARAMETER * Math.sqrt(Math.log(this.simulations) / child.simulations);\r\n}\r\n\r\n// Returns true if current node is leaf, else false\r\nNode.prototype.is_leaf = function() {\r\n  return (this.children.size === 0 || this.gs.possible_moves.length === 0);\r\n}\r\n\r\n/* Travels down the tree until hitting a leaf node and returns it, selecting\r\n   a new Node based on the max UCT among a node's children */\r\nNode.prototype.select = function() {\r\n  if (this.is_leaf()) return this;\r\n  let selectedMove = this.gs.possible_moves[0];\r\n  let maxUCT = this.UCT(selectedMove);\r\n  for (let i = 1; i < this.gs.possible_moves.length; i++) {\r\n    let move = this.gs.possible_moves[i];\r\n    let uct = this.UCT(move);\r\n    if (uct > maxUCT) {\r\n      selectedMove = move;\r\n      maxUCT = uct;\r\n    }\r\n    if (maxUCT === 100) break;\r\n  }\r\n  return this.get_child(selectedMove).select()\r\n}\r\n","\r\n/* Returns the score in [0,1] representing standing for both players\r\n  1 if win, 0 if loss, or some value on (0,1) based on material\r\n*/\r\nexport default function score(gs) {\r\n  let score;\r\n  if (gs.winner === \"B\") score = 1;\r\n  else if (gs.winner === \"W\") score = 0;\r\n  else {\r\n    let diff = Math.abs(gs.pieces[\"B\"] - gs.pieces[\"W\"]);\r\n    score =\r\n    gs.pieces[\"B\"] > gs.pieces[\"W\"] ? (diff + 1) / (diff + 2) :\r\n    1 / (diff + 2);\r\n  }\r\n  return {\"B\": score, \"W\": 1 - score}\r\n}\r\n","import board_layouts from './layouts.json';\r\nimport _ from 'lodash';\r\n\r\nexport default function Gamestate(board_type, turn) {\r\n  let board_layout = board_layouts[board_type];\r\n  //Player's whose turn it is\r\n  this.turn = turn;\r\n  //Action to do\r\n  this.action = \"place\";\r\n  //Moves since the beginning of the game\r\n  this.place_count = 0;\r\n  //Board type\r\n  this.board_type = board_type;\r\n  /* Array representing the game board\r\n     For each tile on the board, \"B\" represents a black piece,\r\n     \"W\" a white piece, \"E\" an empty spot, and null no spot at all */\r\n  this.board = JSON.parse(JSON.stringify(board_layout.init));\r\n  // Temporary placeholder for selected tile after 'move_from' command\r\n  this.selected = null;\r\n  // List of all possible moves from posititon\r\n  this.possible_moves = [];\r\n  // Tuple representing the pieces in game for black and white\r\n  this.pieces = {\"B\": 0, \"W\": 0};\r\n  this.pieces_left_to_place = {\"B\": board_layout.pieces, \"W\": board_layout.pieces }\r\n  this.winner = null;\r\n\r\n\r\n  this.history = [];\r\n\r\n  this.mills = {\"B\": [], \"W\": []};\r\n\r\n  this.get_possible_moves();\r\n}\r\n\r\n/* Returns the pieces left to place for color [color] */\r\nGamestate.prototype.pieces_to_place = function (color) {\r\n  return this.pieces_left_to_place[color];\r\n}\r\n\r\n/* Returns a random valid move for this gamestate */\r\nGamestate.prototype.random_move = function() {\r\n  return this.possible_moves[Math.floor(Math.random()*this.possible_moves.length)];\r\n}\r\n\r\n/* Returns the last move that was made */\r\nGamestate.prototype.last_moves = function() {\r\n  let last_moves = [];\r\n  if (this.history.length > 0 && this.action !== \"move_to\") {\r\n    last_moves.push(this.history[this.history.length - 1]);\r\n    if (last_moves[0].action === \"move_to\")\r\n      last_moves.push(this.history[this.history.length - 2]);\r\n  }\r\n  return last_moves;\r\n}\r\n/* Sets the winner of the game to [color]*/\r\nGamestate.prototype.setWinner = function (color) {\r\n  this.winner = color;\r\n  this.possible_moves = [];\r\n}\r\n\r\n/* Returns true if the placing phase has passed, else false */\r\nGamestate.prototype.second_phase = function() {\r\n  return this.place_count >= board_layouts[this.board_type].pieces * 2\r\n}\r\n\r\n/* Clones this game state */\r\nGamestate.prototype.clone = function() {\r\n  let clone = new Gamestate(this.board_type, this.turn);\r\n  clone.action = this.action;\r\n  clone.place_count = this.place_count;\r\n  clone.board = JSON.parse(JSON.stringify(this.board));\r\n  clone.selected = Object.assign({},this.selected);\r\n  clone.possible_moves = JSON.parse(JSON.stringify(this.possible_moves));\r\n  clone.pieces = Object.assign({},this.pieces);\r\n  clone.winner = this.winner;\r\n  clone.mills = JSON.parse(JSON.stringify(this.mills));\r\n  clone.history = JSON.parse(JSON.stringify(this.history));\r\n  return clone;\r\n}\r\n\r\n// Executes a move based on the command and returns/updates the resulting state\r\nGamestate.prototype.move = function(command) {\r\n  const board_info = board_layouts[this.board_type];\r\n\r\n  //checks command validity\r\n  let valid_command = false;\r\n  for (let i = 0; i < this.possible_moves.length; i++) {\r\n    if (_.isEqual(this.possible_moves[i], command)) {\r\n      valid_command = true;\r\n       break;\r\n    }\r\n  }\r\n  if (!valid_command) throw console.error(\"Invalid Command:\", command);\r\n\r\n  this.history.push({\"action\": this.action, \"command\": command, \"color\": this.turn})\r\n\r\n  //evaluates command and constructs new state\r\n  if (this.action === \"place\" || this.action === \"move_to\") {\r\n    this.board[command.x][command.y] = this.turn;\r\n\r\n    if (this.action === \"move_to\") {\r\n      this.board[this.selected.x][this.selected.y] = \"E\";\r\n      this.selected = null;\r\n    } else {\r\n      this.place_count++;\r\n      this.pieces[this.turn] += 1;\r\n      this.pieces_left_to_place[this.turn] -= 1;\r\n    }\r\n\r\n    //checks if new place for piece would newly form a mill\r\n    let is_new_mill = false;\r\n    for (let i = 0; i < board_info.mills.length; i++) {\r\n      const mill = board_info.mills[i];\r\n\r\n      let new_piece_in_mill = false;\r\n      let is_in_mill = true;\r\n      mill.forEach(loc => {\r\n        if (this.board[loc.x][loc.y] !== this.turn) {\r\n          is_in_mill = false;\r\n        }\r\n        if (_.isEqual(loc, command)) {\r\n          new_piece_in_mill = true;\r\n        }\r\n      });\r\n      if (is_in_mill && new_piece_in_mill) {\r\n        this.mills[this.turn].push(mill);\r\n        is_new_mill = true;\r\n      }\r\n    }\r\n\r\n    //makes adjustments to state based on move\r\n    if (is_new_mill) {\r\n      this.action = \"take\";\r\n    } else {\r\n      this.turn = this.turn === \"W\" ? \"B\" : \"W\";\r\n      if (this.second_phase()) {\r\n        this.action = \"move_from\";\r\n      }\r\n    }\r\n  } else if (this.action === \"move_from\") {\r\n    this.selected = command;\r\n    this.action = \"move_to\";\r\n    for (let i = 0; i < this.mills[this.turn].length; i++) {\r\n      this.mills[this.turn][i].forEach(loc => {\r\n        if (_.isEqual(loc, command)) {\r\n          this.mills[this.turn].splice(i);\r\n          i--;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  } else if (this.action === \"take\") {\r\n    //evaluates command and constructs new state\r\n    this.board[command.x][command.y] = \"E\";\r\n    const opp = this.turn === \"W\" ? \"B\" : \"W\";\r\n    this.pieces[opp] -= 1;\r\n\r\n    //makes adjustments to state based on move\r\n    if (this.second_phase()) {\r\n      if (this.pieces[opp] < 3) {\r\n        this.setWinner(this.turn);\r\n        return this;\r\n      }\r\n      this.action = \"move_from\";\r\n    } else {\r\n      this.action = \"place\";\r\n    }\r\n    this.turn = opp;\r\n  }\r\n  this.get_possible_moves();\r\n  if (this.possible_moves.length === 0) {\r\n      this.setWinner(this.turn === \"W\" ? \"B\" : \"W\");\r\n  }\r\n  return this;\r\n}\r\n\r\n// Returns/updates a list of possible moves from this state\r\nGamestate.prototype.get_possible_moves = function () {\r\n  if (this.winner != null) {\r\n    this.possible_moves = [];\r\n    return [];\r\n  }\r\n\r\n  const possible_moves = [];\r\n  const board = this.board;\r\n  const board_info = board_layouts[this.board_type];\r\n  if (this.action === \"move_to\") {\r\n    board_info.adjecencies[this.selected.x][this.selected.y].forEach(loc => {\r\n      if (board[loc.x][loc.y] === \"E\") {\r\n        possible_moves.push({x: loc.x, y: loc.y});\r\n      }\r\n    });\r\n    this.possible_moves = possible_moves;\r\n    return possible_moves;\r\n  }\r\n  for (let x = 0; x < board.length; x++) {\r\n    for (let y = 0; y < board[x].length; y++) {\r\n      if (this.action === \"place\") {\r\n        if (board[x][y] === \"E\") {\r\n          possible_moves.push({x: x, y: y});\r\n        }\r\n      } else if (this.action === \"move_from\") {\r\n        //Checks if origin is of player int turn's color\r\n        if (board[x][y] === this.turn) {\r\n          //Checks for each adjacency wheter destination is empty\r\n          let adjecencies = board_info.adjecencies[x][y];\r\n          for (let i = 0; i < adjecencies.length; i++) {\r\n            let loc = adjecencies[i];\r\n            if (board[loc.x][loc.y] === \"E\") {\r\n              possible_moves.push({x: x, y: y});\r\n            }\r\n          }\r\n        }\r\n      } else if (this.action === \"take\") {\r\n        //check if tile to take is other player's\r\n        const opposite = this.turn === \"W\" ? \"B\" : \"W\";\r\n        if (board[x][y] !== opposite) continue;\r\n\r\n        //checks if tile to take is in mill\r\n        let is_in_mill = false;\r\n        for (let i = 0; i < this.mills[opposite].length; i++) {\r\n          this.mills[opposite][i].forEach(loc => {\r\n            if (loc.x === x && loc.y === y) {\r\n              is_in_mill = true;\r\n              return;\r\n            }\r\n          });\r\n          if (is_in_mill) break;\r\n        }\r\n\r\n        //If tile is not in opposing mill, then taking it is possible\r\n        if (!is_in_mill) {\r\n          possible_moves.push({x: x, y: y});\r\n        }\r\n      } else {\r\n        throw new Error(\"Gamestate.action must be 'place', 'move_to', 'move_from', or 'take'\");\r\n      }\r\n    }\r\n  }\r\n  this.possible_moves = possible_moves;\r\n  return possible_moves;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board.js';\r\nimport MCTS from './MCTS.js';\r\nimport './style/app.css';\r\nimport Gamestate from './Gamestate.js';\r\n\r\nimport { AppBar, Button, Typography, Container, ButtonGroup, Grid, Paper, Card, CardContent, Toolbar, Box, LinearProgress} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\"\r\n\r\nconst gameTypes = [\r\n  {innerHTML: \"Single Player vs AI\", id: 'single_player'},\r\n  {innerHTML: \"Multiplayer\", id: 'multi_player'}\r\n]\r\n\r\nconst boardTypes = [\r\n  {innerHTML: \"Small Board\", id: \"board_small\"},\r\n  {innerHTML: \"Standard Board\", id: \"board_standard\"}\r\n]\r\n\r\nconst color = [\r\n  {innerHTML: \"White\", id: \"W\"},\r\n  {innerHTML: \"Black\", id: \"B\"}\r\n]\r\n\r\nconst ANIMATION_LENGTH = 200;\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    gs: new Gamestate(\"board_small\", \"W\"),\r\n    ai: null,\r\n    animation_progression: 1,\r\n    is_animating: false,\r\n    ai_interval: null,\r\n    game_type: \"single_player\",\r\n    board_type: \"board_small\",\r\n    color: \"W\",\r\n    think_time: 3,\r\n    think_progression: 0,\r\n    simulations: 0,\r\n    ai_win_chance: .5\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.onStart();\r\n  }\r\n\r\n  runAI = () => {\r\n    let ai_interval = setInterval(() => this.state.ai.iterate(10), 10);\r\n    this.setState({ai_interval});\r\n  }\r\n\r\n  stopAI = () => {\r\n    clearInterval(this.state.ai_interval);\r\n  }\r\n\r\n  makeMove = (x, y) => {\r\n    let gs = this.state.gs.move({x: x, y: y});\r\n    let ai = this.state.ai;\r\n    if (ai != null) {\r\n      this.setState({\r\n        simulations: ai.tree.simulations,\r\n      });\r\n      ai.register_move({x: x, y: y});\r\n    }\r\n    this.setState({gs, ai},\r\n      this.state.gs.action !== \"move_to\" ? this.doMoveAnimation() : () => {},\r\n      this.checkAIMove(),\r\n      ai != null ? this.setState({ai_win_chance: ai.win_chance()}) : () => {}\r\n    );\r\n  }\r\n\r\n  doMoveAnimation = () => {\r\n    this.setState({animation_progression: 0, is_animating: true});\r\n    if (this.state.ai != null) this.stopAI();\r\n    const start = Date.now();\r\n    let animation_interval = setInterval(() => {\r\n      this.setState({animation_progression:\r\n        (Date.now() - start) / ANIMATION_LENGTH\r\n      });\r\n    }, 10);\r\n    setTimeout(() => {\r\n      clearInterval(animation_interval);\r\n      this.setState({animation_progression: 1, is_animating: false});\r\n      if (this.state.ai != null) this.runAI();\r\n    }, ANIMATION_LENGTH);\r\n  }\r\n\r\n  checkAIMove = () => {\r\n    if (this.state.gs.winner != null) {\r\n      this.stopAI();\r\n      return;\r\n    }\r\n    if (!this.player_turn()) {\r\n      let timeout = this.state.think_time * 1000;\r\n      if (this.state.gs.action === \"move_to\") timeout = 0;\r\n      const start = Date.now();\r\n      let think_interval = setInterval(() => {\r\n        this.setState({think_progression:\r\n          (Date.now() - start) / this.state.think_time / 1000\r\n        });\r\n      }, 10);\r\n      setTimeout(() => {\r\n        clearInterval(think_interval);\r\n        this.setState({think_progression: 0});\r\n        if (this.state.ai == null) return;\r\n        let move = this.state.ai.best_move();\r\n        this.makeMove(move.x,move.y);\r\n      }, timeout)\r\n    }\r\n  }\r\n\r\n  onGameTypeToggle = (game_type) => {\r\n    this.setState({game_type});\r\n  }\r\n\r\n  onColorToggle = (color) => {\r\n    this.setState({color});\r\n  }\r\n\r\n  onBoardTypeToggle = (board_type) => {\r\n    this.setState({board_type});\r\n  }\r\n\r\n  player_turn = () => {\r\n    return this.state.ai != null ?\r\n      this.state.ai.color !== this.state.gs.turn : true;\r\n  }\r\n\r\n  onStart = () => {\r\n    let gs = new Gamestate(this.state.board_type, \"W\");\r\n    let ai = null;\r\n    let ai_interval = null;\r\n    clearInterval(this.state.ai_interval);\r\n    if (this.state.game_type === \"single_player\") {\r\n      ai = new MCTS(gs, this.state.color === \"B\" ? \"W\" : \"B\");\r\n    }\r\n    this.setState({gs, ai, ai_interval}, () => {\r\n      if (ai != null) {\r\n        this.runAI();\r\n        this.checkAIMove();\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Nav />\r\n      <Container maxWidth=\"sm\">\r\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center stretch\" spacing={3}>\r\n            {[\r\n            <React.Fragment>\r\n              <TopInfo\r\n                gs={this.state.gs}\r\n                ai={this.state.ai}\r\n                think_progression={this.state.think_progression}\r\n                simulations={this.state.simulations}\r\n                ai_win_chance={this.state.ai_win_chance}\r\n              />\r\n              <Board\r\n                gs={this.state.gs}\r\n                makeMove={this.makeMove}\r\n                player_turn={this.player_turn()}\r\n                animation_progression={this.state.animation_progression}\r\n                is_animating={this.state.is_animating}\r\n              />\r\n              <BottomInfo\r\n                gs={this.state.gs}\r\n                ai={this.state.ai}\r\n              />\r\n            </React.Fragment>,\r\n            <Settings\r\n              game_type={this.state.game_type}\r\n              color={this.state.color}\r\n              board_type={this.state.board_type}\r\n              onGameTypeToggle={this.onGameTypeToggle}\r\n              onColorToggle={this.onColorToggle}\r\n              onBoardTypeToggle={this.onBoardTypeToggle}\r\n              onStart={this.onStart}\r\n            />].map(element => {\r\n              return (\r\n                <Grid item xs={12}>\r\n                  <Card elevation={3} className=\"fullWidth\">\r\n                    <CardContent>{element}</CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass Settings extends Component {\r\n\r\n  getButton = (options, activeOption, onToggle) => {\r\n    return (\r\n      <ButtonGroup size=\"small\" variant=\"outlined\" color=\"default\" aria-label=\"outlined primary button group\">{\r\n        options.map(option => (\r\n          <Button key={option.id} disabled={option.id === activeOption}\r\n            variant={option.id === activeOption ? \"contained\" : \"outlined\"}\r\n            onClick={() => onToggle(option.id)}>\r\n            <Typography variant=\"button\">{option.innerHTML}</Typography>\r\n          </Button>\r\n        ))}\r\n      </ButtonGroup>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n          <Box mb={2} display=\"flex\">\r\n            <Box flexGrow={1}>\r\n              {this.getButton(gameTypes, this.props.game_type, this.props.onGameTypeToggle)}\r\n            </Box>\r\n            {\r\n            this.props.game_type === \"single_player\" ?\r\n            <Box ml={2}>\r\n              {this.getButton(color, this.props.color, this.props.onColorToggle)}\r\n            </Box> : <div />\r\n            }\r\n          </Box>\r\n          <Box display=\"flex\">\r\n            <Box flexGrow={1}>\r\n              {this.getButton(boardTypes, this.props.board_type, this.props.onBoardTypeToggle)}\r\n            </Box>\r\n            <Box ml={2}>\r\n              <Button variant=\"contained\" size = \"small\" color=\"primary\" onClick={this.props.onStart}>Start!</Button>\r\n            </Box>\r\n          </Box>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass TopInfo extends Component {\r\n\r\n  state = {\r\n    win_chance: .5,\r\n    simulations: 0\r\n  }\r\n\r\n  getMoveText = () => {\r\n    const {gs, ai} = this.props;\r\n    var color = gs.winner != null ? gs.winner : gs.turn;\r\n    return (\r\n      <Typography variant=\"subtitle1\" className={color === \"B\" ? \"var-black\" : \"var-white\"}>{\r\n        (ai == null ?\r\n        (color === \"B\" ? \"black\" : \"white\") :\r\n        color === ai.color ? \"ai\" : \"player\") +\r\n        (gs.winner === \"B\" ? \" wins!\" :\r\n        gs.winner === \"W\" ? \" wins!\" :\r\n        (\" to \" + (gs.action === \"place\" ? \"place\" :\r\n          gs.action === \"take\" ? \"take\" : \"move\")))\r\n      }</Typography>\r\n    )\r\n  }\r\n\r\n  getWinChanceText = () => {\r\n    return (\r\n      this.props.ai == null ? <div /> :\r\n      <Typography variant=\"subtitle1\">{'AI winning chance: ' + (this.props.ai_win_chance + \"\").substring(0,5)}</Typography>\r\n    )\r\n  }\r\n\r\n  getSimCountText = () => {\r\n    return (\r\n      this.props.ai == null ? <div /> :\r\n      <Typography variant=\"subtitle1\">{'Simulations run: ' + this.props.simulations}</Typography>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Box mb={1} width={1} display=\"flex\">\r\n        <Box flexGrow={1}>{this.getMoveText()}</Box><br />\r\n        <Box mr={2}>{this.getWinChanceText()}</Box>\r\n        <Box>{this.getSimCountText()}</Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nclass BottomInfo extends Component {\r\n\r\n  getBlackPieceCountText = () => {\r\n    const { gs, ai } = this.props;\r\n    return (\r\n      <Typography variant=\"subtitle1\" className=\"var-black\">\r\n        {ai == null ? \"black: \" : ai.color === \"B\" ? \"ai: \" : \"player: \"}\r\n        {gs.pieces_to_place(\"B\")}\r\n      </Typography>\r\n    )\r\n  }\r\n\r\n  getWhitePieceCountText = () => {\r\n    const { gs, ai } = this.props;\r\n    return (\r\n      <Typography variant=\"subtitle1\" className=\"var-white\">\r\n        {ai == null ? \"white: \" : ai.color === \"W\" ? \"ai: \" : \"player: \"}\r\n        {gs.pieces_to_place(\"W\")}\r\n      </Typography>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Box mt={1} width={1} display=\"flex\">\r\n        <Box mr={2}>\r\n          <Typography variant=\"subtitle1\">Pieces left: </Typography>\r\n        </Box>\r\n        <Box flexGrow={1}>\r\n          {this.getWhitePieceCountText()}\r\n        </Box>\r\n        <Box width={40}>\r\n          {this.getBlackPieceCountText()}\r\n        </Box>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nclass Nav extends Component {\r\n  render () {\r\n    return (\r\n      <AppBar position=\"static\" style={{\"margin-bottom\": \"16px\"}}>\r\n        <Toolbar style={{\"min-height\": \"48px\"}}>\r\n          <Typography variant=\"h6\" color=\"inherit\">Mill-AI</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\r\nimport 'bootstrap';\r\nimport App from \"./App\";\n\r\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}